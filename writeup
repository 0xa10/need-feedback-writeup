
  ___            _  ___  
 / _ \__  ____ _/ |/ _ \ 
| | | \ \/ / _` | | | | |
| |_| |>  < (_| | | |_| |
 \___//_/\_\__,_|_|\___/ 
                         
 --[ Table of contents
        1. Intro 
            [Explain about self, motivation, 2-3 lines tops]
            [Explain about writeup and covered topics: mainly linear cryptanalysis]
            [The challenge - Google CTF qualifier 2016 - crypto,
            as of yet no published practical solution (only bruteforce)]
            [Challenge - encrypted communications in pcap, client/server code
            featuring proprietary crypto - LFSRs and Sbox
            [General premise of the attack, with links to technical gists - 
                breaking Sbox, breaking LFSR, etc ]
        2. KappaCrypto
            [General code structure and class heirarachy
                KappaTunnel relaying KappaChannel, KappaMsg -> KappaPacket,
                General KappaCrypto class interface]
            [Seed generation - 2 lines at most.]
            [Cipher design - 
                LFSR(s), Multi-LFSR, Sbox, Stream XOR, make cool graph]
        3. LFSRs - 
            [Brief explanation, usage examples, historical vulnerabilities - DVD crypto (CSS)]
            [Attacking LFSRs - 
                analyzing period, etc, recovering seed from outputs.]
            [Show intuition for recovering seed for n-sized lfsr using n outputs of said LFSR] - seperate to different page
            [Linear equation systems and gaussian reduction]
            [LFSR representation using linear algebra]
            [Example - creating linear equation system and solving LFSR using GE]
        4. Multi-LFSRs
            [Brief analysis of Multi-LFSRs, xor as addition mod 2]
            [Example - creating LES for Multi LFSR and solving using GE]
        5. Sbox
            [Brief explanation, only non-linear component]
            [Explain about 6->4 bit mapping and resulting conclusions]
            [Intuition - finding linearity in Sbox - fixed bits]
            [Linear cryptanalysis - the idea - finding additional linear relations between inputs and output]
            [Creating equations from linear relations]
        6. Putting it together - 
            [Each Sbox output provides us with a series of equations we know hold over the cipher system]
            [Generally speaking - for a system with LFSRs with total N bits, N linearly-independant
             equations are required]
            [Guessing keystream bytes - HTTP response headers, upper nibbles of ASCII, etc]
            [Given speculative keystream, we can attempt to solve linear equation system using GE]
            [Example and code demo - (sage?)]
        7. The solution - full code in Python3 and the flag

--[ 1 - Intro
    This writeup will describe how to solve the need-feedback challenge from the 2016 Google CTF "Homework" exercises.
    In this challenge you are presented with code for a proprietary implementation of an encrypted tunnel, called KappaCrypto.
    A pcap file containing an encrypted HTTP session is also provided, with the flag presumably contained within the encrypted payload.
    
    Back in 2016 when this challenge was posted I did not have the knowhow to tackle this challenge and I decided to make a point out of learning the necessary skills and solving it.
    Big thanks goes out to Bar Katz for introducing me to the mathematical theory and intuition required to tackle this task.

    This challenge remained unsolved during the CTF, and a solution for it was first published by luc-lynx:
    https://github.com/luc-lynx/need_feedback_writeup/blob/master/README.md
    In his solution, he utilized a meet-in-the-middle technique to reduce the keyspace to approx. 2^43. According to the write-up, revealing the 
    key took about 3 days. 

    In my solution, I wanted to reduce the time required to recover the key to an amount of time feasible in the timespan of an average CTF.
    For this, I chose to attack some of the underlying components of the cipher, while employing some principles of linear cryptanalysis.
    This writeup, hopefully, will serve as an intuitive introduction into some more advanced aspects of crypto, including buzzwords such as:
        - Linear feedback shift registers 
        - Linear cryptanalysis
        - Sbox analysis
        - Linear equation systems
        - Gaussian elimination
        - Cold fusion
        - etc

    The general idea is that the cipher design allows an attacker to find linear equations that 
    hold over the cipher, instantly solving all 60 bits of the initial state using just a few 
    bytes worth of keystream - which can be derived based on the underlying HTTP communications.

--[ 2 - KappaCrypto
    The cipher system presented in the challenge is named KappaCrypto.
    It comprises several components and primitives to implement a secure tunnel -
    A KappaTunnelHandler class implements an interface for a basic python ThreadedTCPServer.
    Inside the tunnel, a KappaChannel object is instantiated, which processes messages in the
    upstream and downstream channels, wrapping them in KappaMsg objects, and then serializing them
    into KappaPacket objects which are finally sent through the tunnel.

    The encryption takes place prior to wrapping in KappaMsg objects, by using the KappaCrypto
    class, which has 3 major components:
        1. 5 sets of LFSR coefficients, representing LFSRs of various bit lengths
        2. An Sbox, represented as a python list - in which sbox_tb[sbox_input] = sbox_output 
        3. a MultiLFSR class, which brings together the five aformentioned LFSRs with the Sbox
    
    https://en.wikipedia.org/wiki/Linear-feedback_shift_register
    We'll go into the nitty gritty of LFSRs in the next section,
    LFSR stands for linear feedback shift register, and is a simple pseudorandom number generator, which emits a single bit each cycle.
    
    As for the Sbox - a Substition-box is simply a table which takes in values in a given range and 
    outputs values in a given range.
    https://en.wikipedia.org/wiki/S-box
    In KappaCrypto, the Sbox implementation boils down to a simple lookup table:
        class Sbox:
          def __init__(self, tb, nbit_out):
            self.tb = tb
            ...
          def get(self, a):
            return self.tb[a]
    Note that the input and output ranges don't have to be the same - as is the case here - 
    the Sbox takes 6 bit values and outputs 4 bit values.
    We'll get into Sbox details and the KappaCrypto specifics later on, but suffice it to say
    at this point that the Sbox usual role in a cipher is to obstruct and remove linear 
    relationships between the plaintext and ciphertext.
    
    KappaCrypto takes these two basic cryptographic primitives and combines them with 
    the MultiLFSR class, which is the topmost logical unit in KappaCrypto.
    In short, this class takes a list of LFSR instances and one S-box instance, a seed value,
    and outputs random bits from the next() method:
      def next(self):
        if len(self.q) == 0:
          v = 0
          for j in range(self.sbox.nbit_in):
            u=0
            for lfsr in self.lfsrs:
              u ^= lfsr.next()
            v|=u<<j
          v = self.sbox.get(v)
          for i in range(self.sbox.nbit_out):
            self.q.append(v >> i & 1)
        res = self.q[0]
        self.q = self.q[1:]
        return res
    Briefly explained - in each round of the MultiLFSR, a single bit is extracted from
    each of the contained LFSRs, and combined using a combining function (in this case, just XORed).
    This is repeated to obtain n bits, where n is the input size for the Sbox, and the n-bit
    vector is then run through the Sbox to obtain bits to output for the keystream.
    The keystream is then simply XORed against the plaintext bitstream.
    
    The MultiLFSR is seeded by hashing a key and initialization vector (initialized to 0) to generate 
    enough random bits to fill all the LFSR states.
    The KappaCrypto class also supports reseeding, which increments the IV value each time
    without changing the key. Reseeds are meant to be triggered using a specific KappaMsg type,
    but luckily for us, the code indicates that reseeding is actually unimplemented.
      def proc_reseed(self, e):
        assert 0, "unimplemented"
        pass
    
    tl;dr - the cipher is composed from 5 LFSRs with fixed coefficients and one Sbox.
    We have a pcap file which shows recorded HTTP traffic encrypted with KappaCrypto.
    Obviously, we're missing the key. Since the key itself is passed through a hash function,
    there's no hope (or reason) to recover it - finding the state values for each of the LFSRs
    will be enough to recover the whole keystream.
            lfsr_coeffs = [
                [0x0 ,0x1 ,0x2 ,0x3 ,0x6 ,0x9 ,0xa],
                [0x0 ,0x1 ,0x2 ,0x3 ,0x6 ,0x7 ,0x9 ,0xa ,0xb],
                [0x0 ,0x2 ,0x7 ,0x8 ,0xa ,0xb ,0xc],
                [0x0 ,0x1 ,0x3 ,0x7 ,0xa ,0xb ,0xd],
                [0x0 ,0x3 ,0x4 ,0xa ,0xb ,0xc ,0xe],
            ]
            for coeffs in lfsr_coeffs:
              lfsr = LFSR(coeffs, coeffs[-1])
              lfsrs.append(lfsr)
    The 5 LFSRs bit length totals to 60 bits (0xa + 0xb + 0xc + 0xd + 0xe), which means
    we have to recover 60 bits - not feasible for bruteforce.
    
--[ 3. Linear feedback shift registers, linear equation systems
    LFSRs are simple PRNG constructs, which are commonly used in hardware applications due to their speed and simplicity.
    Historically, LFSRs have been used (to varying degrees of success) in many ciphers, such as in GSM, Bluetooth, and various digital broadcast mediums.
    Famously, the Content Scramble System, which was used to encrypt DVDs and was implemented using LFSRs, was completely broken partially on account of its 
    use of LFSRs.

    Many types of LFSRs exist, the one we're interested, which most closely resembles the LFSR in KappaCrypto is called a Galois LFSR.
    In KappaCrypto, the LFSR implementation is of a Galois LFSR, it looks like this:
        class LFSR:
          def __init__(self, coeffs, n, state=1):
            (truncated)
          def next(self):
            b = self.state >> (self.n - 1)
            (truncated) 
            return b
    The LFSR is initialized with a coefficient, of n bit-length,
    and the state parameter is effectively the seed.
    The outgoing bit (the MSB) is the output for that round, and the incoming zero bit is inserted as the new LSB.
    
    The coefficient vector marks "taps" on the LFSR, which are XORed with the output bit in 
    each cycle.
    
    Example - simple 4 bit LFSR:
    lsb ... msb
    Coefficient vector - 
        0 1 1 0 
    Initial state -     
        0 1 1 1 
              ^ 
        First output bit 
    State after 1 shift, before XOR:
        0 0 1 1, output bit is 1
    XORing with the taps:
        0 0 1 1 +
        0 1 1 0
          ^ ^
        taps
    State after XORing:
        0 1 0 1
    [animate a few more rounds]

    The state of any LFSR at any given point is linearly dependant on its previous states. This means that given enough outputs of a
    given LFSR, we will be able to recover the LFSRs state prior to those outputs.
    More concretely - given an LFSR n bits in length, we need n outputs to fully recover its state.
    
    For more information how this is accomplished you can see the appendix about LSFRs and
    linear equation systems.
    I ported over some of the concepts seen here:
    https://www.iasj.net/iasj?func=fulltext&aId=88499
    to apply to the LFSR as its implemented in this challenge.
    The following function takes a coefficient vector and returns a set of equations
    for count consecutive outputs. You could multiply this matrix with the initial state
    to get a vector containing 'count' output bits starting from that state.
        def get_lfsr_equations(coeff, count):
            m = np.hstack((np.zeros((n, 1)), np.eye(n)[:,:n-1]))
            coeff_m = np.vstack((np.zeros((n-1, n)), coeff))
            tmp = np.eye(n)
            C = []
            for i in range(count):
                C.append(tmp[:,n-2])
                tmp = (tmp@m + tmp@m@coeff_m) % 2
            return np.matrix(C).transpose()[:n-1,:]
    To clarify - each "equation" in this matrix represents a linear combination of some of 
    the registers bits. Its an expansion of the LFSRs coefficient vector over several 
    iterations of the LFSR.
    
    [Example of output]
    
     
--[ 4. Multi-LFSRs - LES cont.
    As seen earlier, KappaCrypto has a class named MultiLFSR which combines the output of
    all the LFSRs it contains (a Geffe generator?) and then puts them through an Sbox.
    
    In KappaCrypto, the LFSR outputs are XORed together to combine them - which is essentially
    addition modulo 2. As such, we can just add together our equations by stacking them
    horizontally, and add the results vectors for those equations to end up with a valid
    equation set.
    
    For instance, lets assume we have the following LFSRs in our MultiLFSR:
    A = a0 a1 a2 a3 - state vector          B = b0 b1 b2 b3 b4 b5
    C = 0  1  1  0                          C = 1  0  1  1  0  1
    
    Using the code from before, we'll generate equations for each register. Taking the 3rd
    equations as an example:    
    equations_A[3]: 1 1 0 0 - > 
        a0 + a1 = output_A[3]
    equations_B[3]: 0 0 1 0 1 0 -> 
        b2 + b4 = output_B[3]
    It stands to reason that since we add up the outputs, adding up the equations also holds:
        equations_A[3] + equations_B[3] = a0 + a1 + b2 + b4 = output_A[3] + output_B[3]
    
    Conceptually, we're just introducing more variables to our system, so we'll need more
    outputs from the MultiLFSR to solve.
    Given a MultiLFSR with several LFSRs of arbitrary lengths, we need N outputs to solve 
    for the origianl seed, N being the total bit length of all the contained LFSRs.
    
    So, if we stack our equations to represent addition of all LFSR outputs, we can come up
    with a linear equation system
    [example of solving the example MultiLFSR given 10 outputs]

    Before diving into the Sbox, I'd like to show how all of this would apply to KappaCrypto
    had it NOT passed the outputs from the MultiLFSR through the Sbox.
    Lets use the coefficient values from Kappa and generate enough outputs to solve
    for the original seeds, this time using gaussian elimination.
    [Example of solving the Kappa MultiLFSR given 60 outputs]
     
--[ 5. Substition boxes - linear cryptanalysis
    Sboxes take in some set of input bits (of a fixed length) and substitute them with a set
    of output bits (also of a fixed, but not necessarily same length).
    
    In KappaCrypto, the Sbox is implemented as a list with 64 (2^6) elements, which contain 
    values between 0-15 (2^4) - meaning it maps 6 bit values to 4 bit outputs.
    As such, each output value in the list repeats 4 times to account for the 2 bit loss - 
    each output value could have originated from 4 different input values.
    The purpose of the Sbox in a cipher such as KappaCrypto is to reduce linearity, 
    preventing us from employing linear equation systems to solve our LFSR.

    In KappaCrypto, 6 rounds (a round being the sum of each LFSR output) of the MultiLFSR 
    are concatenated and used as 6 bit inputs to the Sbox.
    Prior to the outputs passing through the Sbox, we could create linear equations for each
    of the Sbox outputs.
    The Sbox prevents us from doing this, since it cannot be represented with linear equations.
    
    In order to attack this component of the cipher we need to find linear equations that 
    hold over the Sbox, i.e. "survive" being passed through the Sbox.
    To accomplish this, we need to take a closer look at the Sbox's inputs and outputs, on 
    the bit level. 

    More concretely, given a 4 bit output from the Sbox, we want to look at all four possible 6 
    bit inputs, and try to find any linear equation that holds over all of these inputs.
    
    We'll start off with an intuitive example, working on the Sbox from KappaCrypto:
        sbox_tb = [ 7, 6, 5, 10, 8, 1, 12, 13, 6, 11, 15, 11, 1, 6, 2, 7, 0, 2,
                    8, 12, 3, 2, 15, 0, 1, 15, 9, 7, 13, 6, 7, 5, 9, 11, 3, 3,
                    12, 12, 5, 10, 14, 14, 1, 4, 13, 3, 5, 10, 4, 9, 11, 15, 10,
                    14, 8, 13, 14, 2, 4, 0, 0, 4, 9, 8,]
    First, we want to reverse the Sbox to see which outputs are caused by which inputs:
        rev_sbox_tb = defaultdict(list)
        for idx, value in enumerate(sbox_tb):
            rev_sbox_tb[value].append(idx)
        rev_sbox_tb
        defaultdict(list,
            {7: [0, 15, 27, 30],
             6: [1, 8, 13, 29],
             ... (truncated)
             14: [40, 41, 53, 56],
             4: [43, 48, 58, 61]})
    Taking 7 as an example - this value substitutes 0, 15, 27 and 30. Lets look at their
    binary representation:
        print("\n".join(bin(i)[2:].zfill(6) for i in rev_sbox_tb[7]))
        000000
        001111
        011011
        011110
        
    Looking at each of the bits in each of the inputs, we see the following:
        - In bits 2, 4, 5, 6 of each of the values, theres an even occurence of '0' and '1' bits.
        - In bit 3, '0' only occurs once, and '1' occurs 3 times.
        - In bit 1 - *only* '0' bits occur.
    This shows a significant bias in the Sbox. For now, we're only going to address bit 1 of 
    each of the inputs, since it happens to be 0 for 100% of the Sbox inputs for that value.

    Given this new information, lets say we observe the Sbox output the value 7. 
    We know that the inputs that lead to this value were either 0, 15, 27, or 30. 
    But we know for certain that the first (most significant) bit of whatever the input was - 
    is 0.
    We also know that bit 3 was more likely to be 1 than 0, but we'll ignore this for now
    since it complicates our solution.

    Another example, this time for Sbox output value 14 - 
        print("\n".join(bin(i)[2:].zfill(6) for i in rev_sbox_tb[14]))
        101000
        101001
        110101
        111000
    Here, bits 1 and 5 are the same in each of the inputs, and 75% bias exists in bits 3 and 4.
    
    Let's take a more general approach to this, by employing techniques akin to linear
    cryptanalysis.
    For each of the Sbox outputs, we take the four 6 bits values that could have led to it  
    (e.g. 40, 41, 53 and 56 all lead to the output value 14).
    We then iterate over all possible combinations of those 6 input bits, and sum their values 
    (hamming weight) mod 2 - for each of the four input values. 
    More concretely, we iterate over all possible 6 bit masks, applying them to the four 
    input values, and then summing their bits.
    If all four sums acquired are the same - we have found a linear equation that holds over 
    the Sbox.
    
    For instance, consider the mask value 101100, which means we sum bits 1, 3 and 4 (from MSB 
    to LSB) of each of the input values 40, 41, 53 and 56, which all lead to output value 14.
    Mask - 101100
        101000 & 101100 = 101000  - hamming weight = 2 = 0 mod 2
        101001 & 101100 = 101000  - hamming weight = 2 = 0 mod 2
        110101 & 101100 = 100100  - hamming weight = 2 = 0 mod 2
        111000 & 101100 = 101000  - hamming weight = 2 = 0 mod 2

    This mask (or boolean function) therefore represents a linear equation which holds over
    the Sbox with 100% certainty - given the output value 14, we know for certain that 
    whatever the input was - bits 1, 3 and 4 of it, summed together modulo 2 - were equal to 0.
    An additional example for a mask that holds over this Sbox for output value 14 is 001110
        101000 & 001110 = 001000  - hamming weight = 1 = 1 mod 2
        101001 & 001110 = 001000  - hamming weight = 1 = 1 mod 2
        110101 & 001110 = 000100  - hamming weight = 1 = 1 mod 2
        111000 & 001110 = 001000  - hamming weight = 1 = 1 mod 2

    
    To recap - for each given Sbox output value, and the four corresponding inputs,
    we go over all possible boolean functions which apply a 6 bit mask and then sum all the 
    bits modulo 2, and only save the ones that lead to the same result over the four
    input values.
    
    Eventually, approximately 128 such boolean functions exist for the KappaCrypto Sbox, 
    meaning that for each 4 bit output, we extract on average 8 equations that go toward
    solving our LFSR system!
    (This isn't acccurate since some of these equations will be linearly dependant on each 
    other.)
    
    
--[ 6. Putting it all together
    Recall that each bit of the Sbox output represents the combination (or addition) of
    the output bit from all contained LFSRs in a given round.
    So, another way to look at the Sbox equations that we procured is that each one
    represents the sum of multiple LFSR rounds.

    For example, lets say we have 5 LFSRs, l1 to l5, and their corresponding output vectors,
    Sl1 to Sl5.
    The first bit emitted from the MultiLFSR system will be Sl1(1) + Sl2(1) + ... + Sl5(1) = Sm1,
    the second bit will be Sm2 = Sl1(2) + ... + Sl5(2) and so on.
    Thus, the first value to go through the Sbox will be (concatenated)
        Sm1 Sm2 Sm3 Sm4 Sm5 Sm6
    
    If we were to know, for instance, that the first output value from the Sbox was 14, 
    then we know that Sm1 ... Sm6 is one of the following: 40, 41, 53, 56.
    We also know, with 100% certainty, that the boolean function 001110 -> 1 applies here,
    and that means that we know the sum (mod 2) of a certain combination of the input bits:
        Sm1 Sm2 Sm3 Sm4 Sm5 Sm6
        0   0   1   1   1   0   -> 1
        Sm3 + Sm4 + Sm5 = 1 mod 2
        Sm3 = Sl1(3) + Sl2(3) + Sl3(3) + Sl4(3) + Sl5(3) 
        Sm4 = Sl1(4) + Sl2(4) + Sl3(4) + Sl4(4) + Sl5(4) 
        Sm5 = Sl1(5) + Sl2(5) + Sl3(5) + Sl4(5) + Sl5(5) 
    If we continue to expand these terms, we'll eventually end up with an equation
    with an amount of variables equal to the total bit length of all the LFSRs - lets call it N.
    If we then collect N linearily independant equations, we will have a linear equation system
    that we can solve to reach the initial state of all LFSRs.
    
    So, we have our equations to represent each of the LFSR outputs, and we can stack
    those horizontally to represent the output of each of MultiLFSR rounds.
    We also have boolean functions for each Sbox output that represent linear equations over
    the Sbox input space with respect to the inputs hamming weight.
        
    But how do we know the Sbox outputs? Let's take a look at the pcap:
        [Screen shot of plaintext request, ciphertext response]
    We have 20 HTTP requests, for each part of the file, and 20 encrypted responses.
    Since the request structure is that of an HTTP request, it's safe to assume the reponse
    will be a valid HTTP response - namely one that starts with something along the
    lines of 'HTTP/1.0 200 OK', subject to potential changes in the version or status code.

    If we take the first encrypted response bytes (after stripping the KappaMsg headers)
    and XOR them with this string, we'll have a good amount of presumed keystream with which
    to generate equations:
    We split the guessed keystream into 4 bit nibbles, each representing an output value
    from the Sbox.
    For each of those nibbles, we refer to the boolean functions we discovered earlier
    to construct an equation comprising the 5 LFSRs' state bits as variables, and 
    keep going until we have enough (the same amoount of linearly independant equations and bits).
    If we guessed some of the plaintext wrong, the equation system probably won't solve, and
    we can try again, making slight modifications to the guessed plaintext.
    
    Its worth noting that the guessed keystream doesn't have to be contiguous - we can
    guess just a few bytes (e.g. just 'HTTP') from each of the 20 responses.

    I'll refer you the the solution code to see it come together. While most of the code samples
    above are in Sage for claritys sake, I actually opted to write the solution itself in 
    Python3, using numpy and writing some of the more elusive pieces of code myself.
    Recap and overview of code:
    Preparation:
        1. For all given LFSRs in the MultiLFSR system, generate the equations representing
        each output bit from the MultiLFSR, prior to passing through the Sbox
        2. For all Sbox outputs, search for boolean functions representing linear equations
        that hold over said Sbox input->output mapping.
    Attack:
        1. Using HTTP headers as presumed plaintext, guess some of the keystream values.
        2. For each nibble in the keystream, collect all the boolean functions found for that 
        nibble value.
        3. For each nibble value and its respective boolean functions, take 6 MultiLFSR 
        equations (representing 6 MultiLFSR outputs) and XOR together the equations for which
        the relevant bit in the boolean function was '1', and set the result to be the result
        of said boolean function.
        This will result in a N variable equation, with an additional result bit.
        4. When N linearly independant equations are collected, stack them to create an
        Nx(N+1) matrix representing a linear equation system.
        5. Solve using Gaussian Elimination. The output should be an NxN identity matrix along 
        with a solution column representing the initial state of all N bits in the MultiLFSR.
        6. Using those seed values, decrypt the communication
    The result:
        [Example of decrypted payload]
        [huge png file result]
    The file transferred over the Kappa channel was a huge PNG containing the flag:
        CTF{yesuisunjambon2} 
    

https://www.springer.com/gp/book/9783642173417
https://www.iasj.net/iasj?func=fulltext&aId=88499
https://www.rocq.inria.fr/secret/Anne.Canteaut/poly.pdf

    
    
    

     
TODO - 
    LFSR and GE animation scripts
    Links in writeup
    Set up references section
    Replace get_lfsr_equations with either MATLAB or sage code.
    Colorize bit values in Sbox bias analysis part
